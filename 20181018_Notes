不可变类
创建不可变类要使用final关键字。不可变类是指它的对象一旦被创建了就不能被更改了。
String是不可变类的代表。不可变类有很多好处，譬如它们的对象是只读的，可以在多线程环境下安全的共享，不用额外的同步开销等等。

关于final的重要知识点
final关键字可以用于成员变量、本地变量、方法以及类。
final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。
你不能够对final变量再次赋值。
本地变量必须在声明时赋值。
在匿名类中所有变量都必须是final变量。
final方法不能被重写。
final类不能被继承。
final关键字不同于finally关键字，后者用于异常处理。
final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法。
接口中声明的所有变量本身是final的。
final和abstract这两个关键字是反相关的，final类就不可能是abstract的。
final方法在编译阶段绑定，称为静态绑定(static binding)。
没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”。
将类、方法、变量声明为final能够提高性能，这样JVM就有机会进行估计，然后优化。
按照Java代码惯例，final变量就是常量，而且通常常量名要大写

对于集合对象声明为final指的是引用不能被更改，但是你可以向其中增加，删除或者改变内容。譬如：
private final List Loans = new ArrayList();
list.add(“home loan”);  //valid
list.add("personal loan"); //valid
loans = new Vector();  //not valid


##享元模式

作者：Elliot
链接：https://www.zhihu.com/question/45563937/answer/99495011
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

既然线程数量于计算机本身相关，我们是不是不可调控，是固定的呢？答案显然不是的，在不考虑系统本身限制的情况下，主要跟JVM一下几点有关：-Xms  初始堆大小 (在实际生产中，一般把-Xms和-Xmx设置成一样的。)
-Xmx  最大堆大小-Xss  每个线程栈大小
结论1：当给JVM的堆内存分配的越大，系统可创建的线程数量就越少（可以通过上面测试程序，不断的改变-Xmx，-Xms的值，观看最后异常时的线程数量）。这个如何理解呢？很简单，因为线程占用的是系统空间，所以当JVM的堆内存越大，系统本身的内存就越少，自然可生成的线程数量就越少。结论2：当-Xss的的值越小，可生成的线程数量就越多。(一样可以通过上面测试，保持-Xmx，-Xms不变，改变-Xss的值，jdk5以下默认好像是256K，以上默认为1M，具体记不太清楚了)。这个理解也很简单，线程可用空间保持不变，每个线程占用的栈内存大小变小，自然可生成的线程数量就越多。那么是不是不断加大可用内存，线程数量也会不断增长呢？这个当然不是，上面我特意加粗了不考虑系统本省限制的情况，所以说线程数量还与系统限制有关。主要跟一下几个参数有关(Linux下的)：/proc/sys/kernel/pid_max 增大，线程数量增大，pid_max有最高值，超过之后不再改变，而且32，64位也不一样
/proc/sys/kernel/thread-max 系统可以生成最大线程数量
max_user_process（ulimit -u）centos系统上才有，没有具体研究/proc/sys/vm/max_map_count 增大，数量增多总结：线程最大数量由JVM的堆(-Xmx,-Xms)大小、Thread的栈(-Xss)内存大小、系统最大可创建的线程数的限制参数三个方面影响。不考虑系统限制，可以通过这个公式估算：线程数量 = (机器本身可用内存 - JVM分配的堆内存) / Xss的值。
